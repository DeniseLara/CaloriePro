import './Modal.css';
import { useState, useEffect } from 'react';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, sendEmailVerification, updateProfile, onAuthStateChanged } from 'firebase/auth';
import { auth, db } from './firebase';  // Importa tanto auth como db
import { doc, setDoc, getDocs, collection } from 'firebase/firestore';

function Modal({ showModal, setShowModal, closeModal, setIsAuthenticated }) {
  const [error, setError] = useState("");
  const [user, setUser] = useState(null); // Guardamos el usuario actual

  // Verificamos el estado de autenticación del usuario al montar el componente
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user); // Actualizamos el estado cuando cambia el estado de autenticación
      if (user) {
        setIsAuthenticated(true);  // Establecer el estado a "autenticado" si hay usuario
      } else {
        setIsAuthenticated(false); // Establecer a "no autenticado" si no hay usuario
      }
    });

    // Limpiamos el listener cuando el componente se desmonte
    return () => unsubscribe();
  }, [setIsAuthenticated]);

  // Manejo del registro
  const handleSignUp = async (e) => {
    e.preventDefault();
    const userName = e.target[0].value;  // Nombre de usuario
    const email = e.target[1].value;
    const password = e.target[2].value;

    setError("");

    if (password.length < 6) {
      setError("La contraseña debe tener al menos 6 caracteres.");
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      if (!user) {
        setError("No se pudo crear el usuario.");
        return;
      }

      // Actualizar el displayName en Firebase Auth
      await updateProfile(user, {
        displayName: userName
      });

      // Guardar el nombre de usuario y correo en Firestore
      await setDoc(doc(db, "users", user.uid), {
        userName: userName,
        email: email,
        emailVerified: false
      });

      await sendEmailVerification(user);
      setIsAuthenticated(true);  // Aseguramos que el estado de autenticación se actualice
      closeModal(); // Cierra el modal después de registrarse
    } catch (err) {
      console.error("Error en registro:", err.code);
      setError(err.message);
    }
  };

  // Manejo del inicio de sesión
  const handleLogin = async (e) => {
    e.preventDefault();
    const userName = e.target[0].value;  // Nombre de usuario
    const password = e.target[1].value;

    setError("");

    if (password.length < 6) {
      setError("La contraseña debe tener al menos 6 caracteres.");
      return;
    }

    try {
      // Buscar el correo asociado con el nombre de usuario en Firestore
      let email = null;
      const querySnapshot = await getDocs(collection(db, "users"));
      querySnapshot.forEach((doc) => {
        if (doc.data().userName === userName) {
          email = doc.data().email;
        }
      });

      if (!email) {
        setError("El nombre de usuario no existe.");
        return;
      }

      // Usar el correo para iniciar sesión con Firebase Auth
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      if (!user) {
        setError("No se pudo iniciar sesión.");
        return;
      }

      setIsAuthenticated(true);  // Aseguramos que el estado de autenticación se actualice
      closeModal(); // Cierra el modal después de iniciar sesión
    } catch (err) {
      console.error("Error en inicio de sesión:", err.code);
      setError("Error al intentar iniciar sesión: " + err.message);
    }
  };

  return (
    showModal && (
      <div className={`modal ${showModal ? 'modal-show' : ''}`}>
        <div className="modal-overlay" onClick={closeModal}></div>
        <div className="modal-content" id="get-started">
          <span className="close" onClick={closeModal}>&times;</span>
          {showModal === 'signup' ? (
            <>
              <h2 className='modal-title'>Welcome to CaloriePro</h2>
              <p className='modal-description'>Create an account to access all features</p>
              <form className='modal-form' onSubmit={handleSignUp}>
                <input type="text" placeholder="Username" required />
                <input type="email" placeholder="Email" required />
                <input type="password" placeholder="Password" required />
                <button type="submit" className="btn">Sign Up</button>
              </form>
              <p className='modal-login'>Already have an account? <span className="link-switch" onClick={() => setShowModal('login')}>Login</span></p>
              {error && <p className="error">{error}</p>}
            </>
          ) : (
            <>
              <h2>Welcome Back</h2>
              <p>Log in to your account</p>
              <form onSubmit={handleLogin}>
                <input type="text" placeholder="Username" required /> {/* Ahora pedimos el nombre de usuario */}
                <input type="password" placeholder="Password" required />
                <button type="submit" className="btn">Login</button>
              </form>
              <p>Don't have an account? <span className="link-switch" onClick={() => setShowModal('signup')}>Sign Up</span></p>
              {error && <p className="error">{error}</p>}
            </>
          )}
        </div>
      </div>
    )
  );
}

export default Modal;
