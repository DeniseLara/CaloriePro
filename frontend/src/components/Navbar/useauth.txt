import { createUserWithEmailAndPassword, signInWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { auth, db, saveUserProfileToFirestore } from './firebase';  // Asegúrate de importar la función desde firebase.js
import { setDoc, doc } from 'firebase/firestore';

// Función para validar los datos del usuario antes de guardarlos
const validateUserData = (userData) => {
  return {
    userName: userData.userName || '',  // Si no se pasa userName, asigna una cadena vacía
    email: userData.email || '',  // Si no se pasa email, asigna una cadena vacía
    emailVerified: userData.emailVerified || false,  // Si no se pasa emailVerified, asigna false
    age: userData.age || 0,  // Asignamos un valor predeterminado si no se pasa la edad
    gender: userData.gender || 'notSpecified',  // Asignamos un valor predeterminado
    goal: userData.goal || 'notSpecified',  // Asignamos un valor predeterminado
    weight: userData.weight || 0,  // Asignamos un valor predeterminado
    height: userData.height || 0,  // Asignamos un valor predeterminado
    activityLevel: userData.activityLevel || 'sedentary',  // Asignamos un valor predeterminado
    calorieAdjustment: userData.calorieAdjustment || 0,  // Asignamos un valor predeterminado
  };
};

export const useAuth = () => {

  // Registro de nuevo usuario
  const signUp = async (email, password, userName) => {
    try {
      // Crear un nuevo usuario con email y contraseña
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      // Actualizar el nombre de usuario en Firebase Authentication
      await updateProfile(user, { displayName: userName });

      // Validamos los datos del perfil antes de guardarlos
      const validatedUserData = validateUserData({
        userName: userName,
        email: email,
        emailVerified: user.emailVerified,  // Utilizamos el estado de verificación de email
        age: null,  // Puedes establecer valores por defecto o vacíos si no los tienes
        gender: null,
        goal: null,
        weight: null,
        height: null,
        activityLevel: null,
        calorieAdjustment: null,
      });

      // Guardar el nombre de usuario y el correo en Firestore utilizando la nueva función
      const userData = await saveUserProfileToFirestore(validatedUserData);

      // Retornar el usuario si se guardaron los datos correctamente
      return userData;
    } catch (error) {
      console.error("Error en el registro:", error);
      throw new Error(error.message);  // Lanza el error para manejarlo en el componente
    }
  };

  // Inicio de sesión
  const login = async (email, password) => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    } catch (error) {
      console.error("Error en el inicio de sesión:", error);
      throw new Error(error.message);  // Lanza el error para manejarlo en el componente
    }
  };

  return { signUp, login };
};
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { auth, db, saveUserProfileToFirestore } from './firebase';  // Asegúrate de importar la función desde firebase.js
import { setDoc, doc } from 'firebase/firestore';

// Función para validar los datos del usuario antes de guardarlos
const validateUserData = (userData) => {
  return {
    userName: userData.userName || '',  // Si no se pasa userName, asigna una cadena vacía
    email: userData.email || '',  // Si no se pasa email, asigna una cadena vacía
    emailVerified: userData.emailVerified || false,  // Si no se pasa emailVerified, asigna false
    age: userData.age || 0,  // Asignamos un valor predeterminado si no se pasa la edad
    gender: userData.gender || 'notSpecified',  // Asignamos un valor predeterminado
    goal: userData.goal || 'notSpecified',  // Asignamos un valor predeterminado
    weight: userData.weight || 0,  // Asignamos un valor predeterminado
    height: userData.height || 0,  // Asignamos un valor predeterminado
    activityLevel: userData.activityLevel || 'sedentary',  // Asignamos un valor predeterminado
    calorieAdjustment: userData.calorieAdjustment || 0,  // Asignamos un valor predeterminado
  };
};

export const useAuth = () => {

  // Registro de nuevo usuario
  const signUp = async (email, password, userName) => {
    try {
      // Crear un nuevo usuario con email y contraseña
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      // Actualizar el nombre de usuario en Firebase Authentication
      await updateProfile(user, { displayName: userName });

      // Validamos los datos del perfil antes de guardarlos
      const validatedUserData = validateUserData({
        userName: userName,
        email: email,
        emailVerified: user.emailVerified,  // Utilizamos el estado de verificación de email
        age: null,  // Puedes establecer valores por defecto o vacíos si no los tienes
        gender: null,
        goal: null,
        weight: null,
        height: null,
        activityLevel: null,
        calorieAdjustment: null,
      });

      // Guardar el nombre de usuario y el correo en Firestore utilizando la nueva función
      const userData = await saveUserProfileToFirestore(validatedUserData);

      // Retornar el usuario si se guardaron los datos correctamente
      return userData;
    } catch (error) {
      console.error("Error en el registro:", error);
      throw new Error(error.message);  // Lanza el error para manejarlo en el componente
    }
  };

  // Inicio de sesión
  const login = async (email, password) => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    } catch (error) {
      console.error("Error en el inicio de sesión:", error);
      throw new Error(error.message);  // Lanza el error para manejarlo en el componente
    }
  };

  return { signUp, login };
};


firebase 
:

// Función para validar los datos del perfil del usuario antes de guardarlos
/*const validateUserData = (userData) => {
  return {
    userName: userData.userName || '',  // Si no se pasa userName, asigna una cadena vacía
    email: userData.email || '',  // Si no se pasa email, asigna una cadena vacía
    emailVerified: userData.emailVerified || false,  // Si no se pasa emailVerified, asigna false
    age: userData.age !== undefined ? userData.age : null,  // Si age es undefined, asigna null
    gender: userData.gender || null,  // Si gender es undefined, asigna null
    goal: userData.goal || null,  // Si goal es undefined, asigna null
    weight: userData.weight || null,  // Si weight es undefined, asigna null
    height: userData.height || null,  // Si height es undefined, asigna null
    activityLevel: userData.activityLevel || null,  // Si activityLevel es undefined, asigna null
    calorieAdjustment: userData.calorieAdjustment || null,  // Si calorieAdjustment es undefined, asigna null
  };
};*/

{/* Función para registrar un nuevo usuario con nombre personalizado, email y contraseña
export const signUpUser = async (email, password, userName) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // Guardamos un documento en Firestore con el email y el nombre del usuario
    await setDoc(doc(db, "users", user.uid), {
      userName: userName,  // Usamos el nombre proporcionado por el usuario
      email: user.email
    });

    console.log('Usuario registrado correctamente en Firebase');
    return userCredential;
  } catch (error) {
    console.error('Error en registro:', error);
    throw new Error(error.message);
  }
};*/}

