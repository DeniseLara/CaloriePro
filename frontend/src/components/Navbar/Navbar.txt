// Navbar.jsx
import './Navbar.css';
import { useState, useEffect } from 'react';
import { auth } from './firebase';  // Asegúrate de que la ruta sea correcta
import { onAuthStateChanged, signOut } from 'firebase/auth';
import 'remixicon/fonts/remixicon.css';
import Modal from './Modal';  // Importas el Modal

function Navbar({ showModal, setShowModal, closeModal }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false); // Estado para controlar si el menú está abierto o cerrado

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      setIsAuthenticated(false);
    } catch (err) {
      console.error("Error al cerrar sesión: ", err.message);
    }
  };

  const toggleMenu = () => {
    setMenuOpen(!menuOpen); // Cambia el estado de apertura/cierre del menú
  };

  return (
    <nav className="nav container">
      <a className="logo" href="#">CaloriePro</a>

      {/* Menú de navegación */}
      <div className={`navbar-menu ${menuOpen ? 'show' : ''}`}>
        <ul className="navbar-list">
          <li><a className="link" href="#home">Home</a></li>

          {!isAuthenticated ? (
            <>
              <li><a className="link" href="#benefits">Benefits</a></li>
              <li><a className="link" href="#howItWorks">How it Works</a></li>
              <li><button className="btn-outline" onClick={() => setShowModal('login')}>Login</button></li>
            </>
          ) : (
            <>
              <li><a className="link" href="#dashboard">Dashboard</a></li>
              <li><a className="link" href="#savedFoods">Saved Foods</a></li>
              <li><button className="btn-outline" onClick={handleLogout}>Logout</button></li>
            </>
          )}
        </ul>

        {/* Icono de abrir/cerrar menú */}
        <span className="nav-toggle" onClick={toggleMenu}>
          <i className="ri-menu-line"></i>
        </span>
      </div>

      {/* Modal */}
      <Modal showModal={showModal} closeModal={closeModal} setShowModal={setShowModal} />
    </nav>
  );
}

export default Navbar;




// /* Estilos generales de la barra de navegación */
nav {
  width: 100%;
  background-color: #FDFBF5;
  padding: 1rem;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0px 8.5px 8px rgba(0, 0, 0, 0.1); /* Sombra ligera */
}

.logo {
  font-weight: 700;
  font-size: 1.8rem;
  color: #4A4A4A;
}

/* Estilos para la lista de navegación 
.navbar-list {
  display: flex;
  list-style: none;
  gap: 2.5rem;
  justify-content: center;
  align-items: center;
}*/

.link {
  font-size: 1.2rem;
  font-weight: 500;
  position: relative;
  transition: color 0.3s ease;
  color: #4A4A4A;
}

.link::after {
  content: "";
  position: absolute;
  bottom: -3px; /* Ajustar según el diseño */
  left: 0;
  width: 0%;
  height: 2px;
  transition: width 0.3s ease;
  background-color: #7BBE4A;
}

.link:hover::after {
  width: 100%; /* Subrayado completo */
}

.link:hover {
  color: #7BBE4A;
}

/* Estilo para los botones (Sign Up, Login, etc.) */
.btn-outline {
  background-color: #7BBE4A;
  color: white;
  padding: 0.8rem 1.5rem;
  border: none;
  border-radius: 30px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.btn-outline:hover {
  background-color: #6a9e3d;
  transform: scale(1.05);
}

/* Estilos para el botón de Cerrar Sesión */
.btn-logout {
  background-color: #f44336; /* Rojo brillante */
  color: white;
  padding: 0.8rem 1.5rem;
  border: none;
  border-radius: 30px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.btn-logout:hover {
  background-color: #d32f2f;
  transform: scale(1.05);
}


@media (min-width: 360px){



  nav.container{
    padding-left: 5%;
    padding-right: 5%;
    
  }

  
/* Contenedor del menú */
.navbar-menu {
  position: fixed;
  top: 0;
  right: -100%; /* Inicialmente fuera de la vista */
  width: 60%; /* El menú ocupa solo el 50% del ancho */
  height: 100%;
  padding:8rem 4rem 0;
  background-color: #fff;
  transition: right 0.3s ease-in-out;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
}

/* Mostrar el menú cuando está activo */
.navbar-menu.show {
  right: 0; /* El menú se mueve a la vista */

}

.nav-toggle,
.nav-close{
  font-size: 1.5rem;
}

/* Icono de cierre */
.nav-close {
  position: absolute;
  top: 1rem;
  right: 1.5rem;
  
  color: #6a9e3d;
  cursor: pointer;
  z-index: 10;
  display: none; /* Por defecto, no se muestra */
}

/* Mostrar el icono de cierre cuando el menú está abierto */
.navbar-menu.show .nav-close {
  display: block; /* Mostrar el icono de cierre cuando el menú tiene la clase 'show' */
}

  .navbar-list{
    display: flex;
    flex-direction: column;
    
    row-gap: 4rem;
    
  }
  
 
  
}





@media (min-width: 1024px){

  nav.container{
    padding-left: 10%;
    padding-right: 10%;
  }


  nav {
    /* Asegúrate de que el nav ocupe todo el ancho y se mantenga fijo en la parte superior */
    width: 100%;
    background-color: #FDFBF5;
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 10;
    box-shadow: 0px 8.5px 8px rgba(0, 0, 0, 0.1); /* Sombra ligera */
    padding: 1rem 10%; /* Añadí padding para que se mantenga en proporción con el contenedor */
  }

  /* Asegúrate de que el menú no se "deslize" cuando esté en pantallas grandes */
  .navbar-menu {
    position: initial; /* El menú no se mueve con 'fixed' */
    top: initial; /* Elimina el valor top */
    right: initial; /* Elimina la regla 'right' */
    width: auto; /* Deja que ocupe el espacio disponible */
    height: auto; /* Elimina altura fija */
    padding: 0; /* Elimina padding innecesario */
    background-color: transparent; /* Fondo transparente en pantallas grandes */
    box-shadow: none; /* Elimina la sombra en pantallas grandes */
  }

  /* No necesitamos el icono de cierre en pantallas grandes */
  .nav-toggle,
  .nav-close {
    display: none; /* Ocultar los íconos de menú y cierre en pantallas grandes */
  }

  /* Ajuste de la lista de navegación para que se alineen horizontalmente */
  .navbar-list {
    display: flex; /* Asegúrate de que los elementos estén alineados en fila */
    flex-direction: row; /* Mantén los elementos en una fila horizontal */
    justify-content: center; /* Centra los elementos */
    align-items: center; /* Alinea los elementos verticalmente */
    gap: 2.5rem; /* Espaciado entre los enlaces */
  }
  
 

}




//real 
import './Navbar.css';
import { useState, useEffect } from 'react';
import { auth } from './firebase';  // Asegúrate de que la ruta sea correcta
import { onAuthStateChanged, signOut } from 'firebase/auth';
import 'remixicon/fonts/remixicon.css';
import Modal from './Modal';  // Importas el Modal
import { GiBodyBalance } from "react-icons/gi";
import { Link, useLocation } from 'react-router-dom'; // Cambié a Link

function Navbar() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false); // Estado para controlar si el menú está abierto o cerrado
  const [showModal, setShowModal] = useState('');  // Estado para manejar el modal
  const [activeLink, setActiveLink] = useState("home");  // Estado para manejar el link activo
  const location = useLocation(); // Hook para obtener la ruta actual
  
  // Actualizar el estado activeLink según la ruta actual
  useEffect(() => {
    if (location.pathname === '/home-logged-in') {
      setActiveLink('home');
    } else if (location.pathname === '/getstarted') {
      setActiveLink('benefits');
    } else if (location.pathname === '/how-it-works') {
      setActiveLink('how-it-works');
    } else if (location.pathname === '/dashboard') {
      setActiveLink('dashboard');
    } else if (location.pathname === '/savedFoods') {
      setActiveLink('savedFoods');
    }
  }, [location]);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      setIsAuthenticated(false);
    } catch (err) {
      console.error("Error al cerrar sesión: ", err.message);
    }
  };

  const toggleMenu = () => {
    setMenuOpen(!menuOpen); // Cambia el estado de apertura/cierre del menú
  };

  const closeMenu = () => {
    setMenuOpen(false); // Cierra el menú
  };

  return (
    <nav className="navbar">
      <a className="logo-name" href="#">CaloriePro<GiBodyBalance className='logo-img'/></a>

      {/* Menú de navegación */}
      <div className={`navbar-menu ${menuOpen ? 'show' : ''}`}>
        <ul className="navbar-list">
          {/* Home siempre activo al principio */}
          <li>
            <Link
              className={`link ${activeLink === 'home' ? 'active' : ''}`}
              to="/home-logged-in"
            >
              Home
            </Link>
          </li>

          {!isAuthenticated ? (
            <>
              <li><Link
                className={`link ${activeLink === 'benefits' ? 'active' : ''}`}
                to="/getstarted"
              >
                Benefits
              </Link></li>
              <li><Link
                className={`link ${activeLink === 'how-it-works' ? 'active' : ''}`}
                to="/how-it-works"
              >
                How it Works
              </Link></li>
              <li><button className="btn-outline" onClick={() => setShowModal('login')}>Login</button></li>
            </>
          ) : (
            <>
              <li><Link
                className={`link ${activeLink === 'dashboard' ? 'active' : ''}`}
                to="/dashboard"
              >
                Dashboard
              </Link></li>
              <li><Link
                className={`link ${activeLink === 'savedFoods' ? 'active' : ''}`}
                to="/savedFoods"
              >
                Saved Foods
              </Link></li>
              <li><button className="btn-outline" onClick={handleLogout}>Logout</button></li>
            </>
          )}
        </ul>

        {/* Icono de cerrar menú */}
        <span className="nav-close" onClick={closeMenu}>
          <i className="ri-close-line"></i>
        </span>
      </div>

      {/* Icono de menú */}
      <span className="nav-toggle" onClick={toggleMenu}>
         <i className="ri-menu-3-fill"></i>
      </span>

      {/* Modal */}
      <Modal showModal={showModal} setShowModal={setShowModal} closeModal={() => setShowModal('')} />
    </nav>
  );
}

export default Navbar;



////// NAVBAR ANTIGUO /////

import './Navbar.css';
import { useState, useEffect } from 'react';
import { useAuth } from './authContext'; // Importamos el contexto de autenticación
import { signOut } from 'firebase/auth';  // Importación para la función de signOut
import { auth } from '../firebaseconfig/firebase'; // Asegurándonos de importar la instancia de Firebase Auth
import Modal from './Modal'; 
import { Link } from 'react-scroll'; // Link de react-scroll para desplazamiento suave
import { GiBodyBalance } from "react-icons/gi";
import { IoMdClose } from "react-icons/io";
import { RiMenu3Fill } from "react-icons/ri";

import { Link as RouterLink, Navigate, useLocation, useNavigate } from 'react-router-dom'; // Cambié a Link

function Navbar() {
  const { isAuthenticated, setIsAuthenticated } = useAuth(); // Usamos el estado desde el contexto
  const [menuOpen, setMenuOpen] = useState(false); // Estado para controlar si el menú está abierto o cerrado
  const [showModal, setShowModal] = useState(false);  // Estado para manejar el modal
  //const [activeLink, setActiveLink] = useState("");  // Estado para manejar el link activo
  const location = useLocation(); // Hook para obtener la ruta actual
  const navigate = useNavigate();
  const [activeLink, setActiveLink] = useState("hero"); // "hero" activo por defecto

  
  // Si el usuario está autenticado, establecer "home" como activo por defecto
useEffect(() => {
  if (isAuthenticated) {
    setActiveLink("home");
  } else {
    setActiveLink("hero");
  }
}, [isAuthenticated]);

//const getLinkClass = (link) => (activeLink === link ? 'link active' : 'link');
  
  
  // Actualizar el estado activeLink según la ruta actual
  useEffect(() => {
    const path = location.pathname.split("/")[1];  // Obtenemos la primera parte de la ruta
    setActiveLink(path);  // Asignamos el link activo de acuerdo a la ruta
  }, [location]);

  const handleLogout = async () => {
    try {
      await signOut(auth);  // Usamos la instancia auth importada
      setIsAuthenticated(false);  // Actualizamos el estado de autenticación
      //nuevo
      navigate("/")
    } catch (err) {
      console.error("Error al cerrar sesión: ", err.message);
    }
  };

  const toggleMenu = () => {
    setMenuOpen(!menuOpen); // Cambia el estado de apertura/cierre del menú
  };

  const closeMenu = () => {
    setMenuOpen(false); // Cierra el menú
  };

  const getLinkClass = (link) => activeLink === link ? 'link active' : 'link';

  // Función para hacer scroll suave al Hero
  const scrollToHero = () => {
    const section = document.getElementById('hero');
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleIconClick = () => {
    const section = document.getElementById('hero');
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  };
  


  return (
    <nav className="navbar container">
      <button 
      className="logo-name" 
      onClick={handleIconClick}
      type='button'
      aria-label='logo'>
        CaloriePro <GiBodyBalance className='logo-img'/>
      </button>

      {/* Menú de navegación */}
      <div className={`navbar-menu ${menuOpen ? 'show' : ''}`}>
        <ul className="navbar-list">
          {/* Home siempre activo al principio */}
          <li>
          {!isAuthenticated ? (
              <Link
                className={getLinkClass('hero')}
                to="hero"
                aria-label='go to home page'
                smooth={true}
                duration={500}
                onClick={closeMenu}
                onSetActive={() => setActiveLink('hero')} // Actualiza el estado cuando se active

              >
                Home
              </Link>
            ) : (
              <RouterLink
                className={getLinkClass('home')}
                to="/home"
                aria-label='go to home page'
                onClick={closeMenu}
              >
                Home
              </RouterLink>
            )}
          </li>

          {!isAuthenticated ? (
          <>         
              <li><Link
                  to="testimonials"
                  smooth={true}
                  offset={-70}
                  duration={200}
                  aria-label='go to testimonials section'
                  className={getLinkClass('testimonials')}
                  onSetActive={() => setActiveLink('testimonials')}
                >
                  Testimonials
                </Link></li>

              <li><Link
                  to="howitworks"
                  smooth={true}
                  offset={-70}
                  duration={200}
                  aria-label='go to how it works section'
                  className={getLinkClass('howitworks')}
                  onSetActive={() => setActiveLink('howitworks')}
                >
                  How it Works
                </Link></li>

              <li><button 
              className="btn-outline" 
              onClick={() => setShowModal(true)}
              type='button'
              aria-label='Sign up'
              >
                Sign Up
              </button></li> 
            </>
          ) : (
            <>
              <li>
              <RouterLink
                  className={getLinkClass('dashboard')}
                  to="/dashboard"
                  aria-label='go to dashboard page'
                  onClick={closeMenu}
                >
                  Dashboard
                </RouterLink>
              </li>
              
              <li><button 
              className="btn-outline" 
              onClick={handleLogout}
              type='button'
              aria-label='log out'
              >
                Logout
              </button></li>
            </>
          )}
        </ul>

        {/* Icono de cerrar menú */}
        <button 
        className="nav-close" 
        onClick={closeMenu} 
        aria-label="Close menu"
        type='button'
        >
          <IoMdClose/>
        </button>
      </div>

      {/* Icono de menú */}
      <button 
      className="nav-toggle" 
      onClick={toggleMenu} 
      aria-label="Open menu"
      type='button'
      >
        <RiMenu3Fill/>
      </button>

      {/* Modal */}
      <Modal showModal={showModal} setShowModal={setShowModal} closeModal={() => setShowModal(false)} />
    </nav>
  );
}

export default Navbar;



////// MODAL ANTIGUO //////
import "./Modal.css";
import { motion, AnimatePresence  } from 'framer-motion';
import { useState } from "react";
import { useAuth } from "./authContext";  // Importamos el hook que contiene la lógica de autenticación
import { useNavigate } from "react-router-dom";  // Para redirigir al dashboard
import PropTypes from "prop-types";
import ClipLoader from "react-spinners/ClipLoader"; // Importamos el spinner

function Modal({ closeModal, showModal }) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);  // Estado de carga
  const [userName, setUserName] = useState("");  // Para el nombre de usuario
  const [step, setStep] = useState(1);  // Paso actual: 1 = registro, 2 = login
  const { login, signUp, error, setError } = useAuth();  // Usamos login, signUp y error desde el contexto
  const navigate = useNavigate();  // Usamos useNavigate para redirigir al dashboard

  // Manejo del registro
  const handleSignUp = async (e) => {
    e.preventDefault();
    setError(""); // Limpiar el error
    setLoading(true); // Inicia el estado de carga

    if (password.length < 6) {
      setError("La contraseña debe tener al menos 6 caracteres.");
      setLoading(false); // Detenemos el estado de carga
      return;
    }

    try {
      const userCredential = await signUp(email, password, userName); // Usamos el servicio de registro

      if (userCredential) {
        setLoading(true)
        // Al registrar al usuario, redirigir directamente al Dashboard
        navigate("/dashboard"); // Asegúrate de que tu ruta de Dashboard esté configurada
        closeModal(); // Cerrar el modal
      }
    } catch (err) {
      console.error("Error en registro:", err);
      setError(err.message); // Mostramos el error de Firebase
    } finally {
      setLoading(false); // Detenemos el estado de carga
    }
  };

  // Manejo del inicio de sesión
  const handleLogin = async (e) => {
    e.preventDefault(); // Prevenimos la recarga de la página
    setLoading(true); // Inicia el estado de carga
    setError(""); // Limpiar error previo

    if (!email || !password) {
      setError("Por favor, ingrese su correo y contraseña");
      return;
    }

    try {
      await login(email, password);
      if (!error) {
        navigate("/dashboard"); // Redirigir al dashboard
        closeModal(true); // Cerrar el modal si el login es exitoso
      }
    } catch (err) {
      setError("Error al iniciar sesión. Verifique sus credenciales.");
      console.error("Error en login:", err);
    } finally {
      setLoading(false); // Detenemos el estado de carga
    }
  };

  // Limpiar el error al cambiar de paso
  /*const handleStepChange = (newStep) => {
    setStep(newStep);
    setError(""); // Limpiar el error al cambiar de paso
  };*/

  // Animación de apertura y cierre del modal
  const modalVariants = {
    hidden: { opacity: 0, scale: 0.8 },  // Modal invisible y pequeño
    visible: { opacity: 1, scale: 1, transition: { duration: 0.4 } },  // Modal visible con transición suave
    exit: { opacity: 0, scale: 0.8, transition: { duration: 0.3 } },  // Modal desapareciendo suavemente
  };

  // Animación para el contenido del modal
  const contentVariants = {
    hidden: { opacity: 0, y: -30 },  // Contenido invisible y desplazado hacia arriba
    visible: { opacity: 1, y: 0, transition: { duration: 0.4, ease: "easeOut" } },  // Contenido visible con un pequeño desplazamiento hacia abajo
  };

  return (
    <AnimatePresence>
      {showModal && (
        <motion.div
          className={`modal ${showModal ? "modal-show" : ""}`}
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={modalVariants}
        >
          <motion.div
            className="modal-overlay"
            onClick={closeModal}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          ></motion.div>

          <motion.div className="modal-content" id="get-started" variants={contentVariants}>
            <span className="close" onClick={closeModal}>&times;</span>

            {/* Solo mostramos el loading si el estado 'loading' está activado */}
            {loading ? (
              <div className="loading-overlay">
                <ClipLoader size={30} color="#4fa94d" loading={loading} />
                <p>Cargando...</p>
              </div>
            ) : (
              <>
                {step === 1 ? (
                  <motion.div
                    key="sign-up"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h2 className="modal-title">Welcome to CaloriePro</h2>
                    <p className="modal-description">Create an account to access all features</p>
                    <form className="modal-form" onSubmit={handleSignUp}>
                      <input
                        type="text"
                        placeholder="Username"
                        value={userName}
                        onChange={(e) => setUserName(e.target.value)}
                        required
                      />
                      <input
                        type="email"
                        placeholder="Email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                      />
                      <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                      />
                      <button type="submit" className="btn" disabled={loading}>
                        {loading ? "Cargando..." : "Sign Up"}
                      </button>
                    </form>
                    <p className="modal-login">
                      Already have an account?{" "}
                      <span className="link-switch" onClick={() => setStep(2)}>
                        Login
                      </span>
                    </p>
                    {error && <p className="error">{error}</p>}
                  </motion.div>
                ) : step === 2 ? (
                  <motion.div
                    key="login"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h2 className="modal-title login">Login to CaloriePro</h2>
                    <form className="modal-form" onSubmit={handleLogin}>
                      <input
                        type="email"
                        placeholder="Email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                      />
                      <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                      />
                      <button type="submit" className="btn" disabled={loading}>
                        {loading ? "Cargando..." : "Login"}
                      </button>
                    </form>
                    <p className="modal-signup">
                      Don't have an account?{" "}
                      <span className="link-switch" onClick={() => setStep(1)}>
                        Sign Up
                      </span>
                    </p>
                    {error && <p className="error">{error}</p>}
                  </motion.div>
                ) : null}
              </>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

Modal.propTypes = {
  closeModal: PropTypes.func.isRequired,
  showModal: PropTypes.bool.isRequired,
};

export default Modal;