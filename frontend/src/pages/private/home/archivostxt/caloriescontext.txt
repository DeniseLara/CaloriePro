import { createContext, useContext, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, updateDoc } from 'firebase/firestore';

// Creamos un contexto
const CaloriesContext = createContext();

// Componente que proporciona el contexto de calorías a toda la aplicación
export const CaloriesProvider = ({ children }) => {
  // Estado para las calorías consumidas
  const [caloriesConsumed, setCaloriesConsumed] = useState(0);
  //const [initialCaloriesLoaded, setInitialCaloriesLoaded] = useState(false); // Para evitar duplicados

  const auth = getAuth();
  const db = getFirestore();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const userDoc = doc(db, 'users', user.uid);
        const docSnap = await getDoc(userDoc);

        if (docSnap.exists()) {
          const storedCalories = docSnap.data().caloriesConsumed || 0;
          setCaloriesConsumed(storedCalories); // Cargar las calorías consumidas desde Firestore

          // Solo actualiza si las calorías no han sido cargadas previamente
         // if (!initialCaloriesLoaded) {
          //  setCaloriesConsumed(storedCalories);
          //  setInitialCaloriesLoaded(true); // Marcar que las calorías ya han sido cargadas
          //}
        }
      } else {
        // Usuario ha cerrado sesión
        // No reiniciamos las calorías consumidas aquí porque deben persistir
      }
    });

    return () => unsubscribe(); // Limpiar el listener cuando el componente se desmonta
  }, [auth, db]);

  
  // Función para agregar calorías
  const addCalories = async (calories) => {
    setCaloriesConsumed((prevCalories) => prevCalories + calories);

    const user = auth.currentUser;
    if (user) {
      const userDoc = doc(db, 'users', user.uid);
      await updateDoc(userDoc, {
        caloriesConsumed: caloriesConsumed + calories, // Guardar calorías en Firestore
      });
    }
  };

  // Exportamos el contexto con los valores necesarios
  return (
    <CaloriesContext.Provider value={{ caloriesConsumed, addCalories }}>
      {children}
    </CaloriesContext.Provider>
  );
};

CaloriesProvider.propTypes = {
  children: PropTypes.node.isRequired, // Aseguramos que 'children' sea un nodo válido
};

// Hook personalizado para acceder al contexto
export const useCalories = () => {
  return useContext(CaloriesContext); // Aquí accedemos al contexto de calorías
};