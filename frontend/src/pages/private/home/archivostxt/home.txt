import { useState, useEffect } from "react";
import './Home.css';
import Search from "./Search"; 
import { auth, getUserProfileFromFirestore } from '../../../firebaseconfig/firebase'
import { onAuthStateChanged } from 'firebase/auth';
import CaloriesResults from './CaloriesResults'; 

// Importamos el hook para el contexto de calorías
import { useCalories } from "../context/CaloriesContext";

function Home() {
  const [userName, setUserName] = useState("");
  const [userData, setUserData] = useState(null);  // Datos del perfil
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [nutritionData, setNutritionData] = useState(null); // Datos de nutrición de los alimentos
  const [nutritionError, setNutritionError] = useState(""); // Para manejar errores en la búsqueda
  const [errorMessage, setErrorMessage] = useState(""); // Estado para mostrar errores en la UI

    // Obtenemos el contexto de calorías
    const { caloriesConsumed, addCalories } = useCalories();  // Ya no se usa removeCalories
    
    const caloriesToDisplay = Math.round(caloriesConsumed);  // Redondeo de calorías
  

  // Escuchamos el estado de autenticación
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (userId) => {
      if (userId) {
        setIsAuthenticated(true);
  
        try {
          // Obtenemos los datos del perfil del usuario desde Firestore
          const storedUserData = await getUserProfileFromFirestore(userId.uid);
  
          if (storedUserData) {
            // Usamos userName de Firestore en lugar de displayName
            setUserName(storedUserData.userName || "Invitado"); // "Invitado" por defecto si no tiene userName
            setUserData(storedUserData); // Guardamos los datos completos del usuario
          }
        } catch (error) {
          setErrorMessage("Hubo un problema al cargar tu perfil.");
        }
      } else {
        setUserName("Invitado"); // Si no está autenticado, mostramos "Invitado"
        setIsAuthenticated(false);
        setUserData(null);
      }
    });
  
    return () => unsubscribe();
  }, []);
  
  // Función para manejar la búsqueda de alimentos
  const handleSearchCalories = (food) => {
    if (!food) {
      setNutritionError("Por favor ingresa un alimento para buscar.");
      return;
    }

    const dummyNutritionData = {
      totalNutrients: {
        ENERC_KCAL: { quantity: 100 },
        PROCNT: { quantity: 20 },
        FAT: { quantity: 10 },
        CHOCDF: { quantity: 60 },
      },
      ingredients: food, // El nombre del alimento
    };

    setNutritionData(dummyNutritionData); // Asignamos los datos obtenidos
    setNutritionError(""); // Limpiamos cualquier error previo
    setErrorMessage(""); // Limpiamos cualquier mensaje de error
  };


  return (
    <div className="home-container container">
      <h1 className="home-title">Welcome to CaloriePro</h1>

      {userName && (
        <p className="home-description">
          ¡Hi, {userName}! Keep track of what you consume with just a search.
        </p>
      )}

      {isAuthenticated && userData ? (
        <>
          <Search onSearchCalories={handleSearchCalories} />

          {nutritionData ? (
            <CaloriesResults 
              nutritionData={nutritionData} 
              error={nutritionError} 
              onAddCalories={addCalories}  // Usamos el contexto para agregar calorías
              caloriesConsumed={caloriesConsumed}
            />
          ) : (
            nutritionError && <p className="error-message">{nutritionError}</p>
          )}
        </>
      ) : (
        <p>Por favor, completa tu perfil en el Dashboard.</p>
      )}

      
      {errorMessage && <p className="error-message">{errorMessage}</p>}
    </div>
  );
}

export default Home;






  // La función que llama al hook para buscar las calorías
  const handleSearchCalories = (food) => {
    if (!food) {
      setErrorMessage("Por favor ingresa un alimento para buscar.");
      return;
    }

    setErrorMessage(""); // limpiar mensajes previos
    analyzeNutrition(food); // Llamamos a la función que hace la consulta
  };