import { useState, useEffect } from "react";
import './UserProfile.css';
import SuccessModal from './SuccessModal'
import PropTypes from "prop-types";
import { ClipLoader } from 'react-spinners';
import { saveUserProfileToFirestore } from "../../firebaseconfig/firebase";  // Asegúrate de importar la función correctamente

function UserProfile({
  userData,
  isEditing,
  handleEditToggle,
  editedData,
  setEditedData,  // Función para actualizar editedData en el componente padre
  setIsSaving,
  dailyGoal,
  userUid, //cambiar a useruid
  isSaving,
  setIsEditing,
  setUserData  // Para actualizar los datos completos del usuario en el componente principal
}) {
  const [saveError, setSaveError] = useState(null);
  const [showModalUser, setShowModalUser] = useState(false);  // Estado para controlar la visibilidad del modal

  // Usamos useEffect para sincronizar los datos de userData con el estado editedData
  useEffect(() => {
    if (userData) {
      setEditedData({
        age: userData.age || '',
        gender: userData.gender || 'male',
        goal: userData.goal || 'lose',
        weight: userData.weight || '',
        height: userData.height || '',
        activityLevel: userData.activityLevel || 'sedentary',
        calorieAdjustment: userData.calorieAdjustment || ''
      });
    }
  }, [userData, setEditedData]);

    // Maneja el cambio de valores en el formulario
    const handleLocalChange = (e) => {
      const { name, value } = e.target;
      setEditedData((prevData) => ({ ...prevData, [name]: value }));
    };
  
    const handleProfileSubmit = async (e) => {
      e.preventDefault();
      setIsSaving(true);
  
      try {
        // Guardar los datos en Firestore
        await saveUserProfileToFirestore(editedData, userUid);
        
        // Actualizar el estado en el componente principal
        setUserData(editedData);

        setShowModalUser(true)
        
        setIsSaving(false);
        setIsEditing(false);
      } catch (error) {
        setIsSaving(false);
        setSaveError("Error al guardar perfil. Intenta nuevamente.");
        {/*console.error("Error al guardar perfil:", error);*/}
      }
    };
  

  // Si los datos no están disponibles, mostrar un mensaje de carga
  if (!userData) {
    return <div className="userprofile-container"><ClipLoader color="#000" loading={true} size={50} /></div>;
  }

  
  return (
    <div className="userprofile-container">
      <div className="userprofile-content">
        {!isEditing ? (
          <div className="userprofile-info">
            <ul className="userprofile-list">
              <h2 className="userprofile-title">Your profile</h2>
              <li className="userprofile-description">
                <p>Age</p> {userData.age || "N/A"}
              </li>
              <li className="userprofile-description">
                <p>Gender</p> {userData.gender || "N/A"}
              </li>
              <li className="userprofile-description">
                <p>Goal</p> {userData.goal || "N/A"}
              </li>
              <li className="userprofile-description">
                <p>Weight</p> {userData.weight || "N/A"} kg
              </li>
              <li className="userprofile-description">
                <p>Height</p> {userData.height || "N/A"} cm
              </li>
              <li className="userprofile-description">
                <p>Activity level</p> {userData.activityLevel || "N/A"}
              </li>
              <li className="userprofile-description">
                <p>Required calories</p> {dailyGoal || "N/A"} calories.
              </li>
            </ul>
            <button className="userprofile-btn edit" onClick={handleEditToggle}>Edit</button>
          </div>
        ) : (
          <form className="userprofile-form" onSubmit={handleProfileSubmit}>
            <h2 className="userprofile-title">Edit your profile</h2>
            <label className="userprofile-label">
              Age
              <input
                className="userprofile-input"
                type="number"
                name="age"
                value={editedData.age}
                onChange={handleLocalChange}
                required
              />
             {/*} {editedData.age === '' && <span className="error">Por favor, ingresa tu edad</span>}*/}
            </label>
            <label className="userprofile-label">
            Gender
              <select
                className="userprofile-select"
                name="gender"
                value={editedData.gender}
                onChange={handleLocalChange}
                required
              >
                <option value="male">Male</option>
                <option value="female">Female</option>
              </select>
            </label>
            <label className="userprofile-label">
            Goal
              <select
                className="userprofile-select"
                name="goal"
                value={editedData.goal}
                onChange={handleLocalChange}
                required
              >
                <option value="lose">Lose weight</option>
                <option value="maintain">Maintain weight</option>
                <option value="gain">Gain muscle mass</option>
              </select>
            </label>
            <label className="userprofile-label">
            Weight (kg)
              <input
                className="userprofile-input"
                type="number"
                name="weight"
                value={editedData.weight}
                onChange={handleLocalChange}
                required
              />
             {/*} {editedData.weight === '' && <span className="error">Por favor, ingresa tu peso</span>}*/}
            </label>
            <label className="userprofile-label">
            Height (cm)
              <input
                className="userprofile-input"
                type="number"
                name="height"
                value={editedData.height}
                onChange={handleLocalChange}
                required
              />
             {/*} {editedData.height === '' && <span className="error">Por favor, ingresa tu altura</span>}*/}
            </label>
            <label className="userprofile-label">
            Activity level
              <select
                className="userprofile-select"
                name="activityLevel"
                value={editedData.activityLevel}
                onChange={handleLocalChange}
                required
              >
                <option value="sedentary">Sedentary</option>
                <option value="light">Light</option>
                <option value="moderate">Moderate</option>
                <option value="intense">Intense</option>
                <option value="veryIntense">Very intense</option>
              </select>
            </label>

            {editedData.goal === "lose" || editedData.goal === "gain" ? (
              <label className="userprofile-label">
                {editedData.goal === "lose" ? "Déficit calórico" : "Superávit calórico"} (200-500 calorías):
                <input
                  type="number"
                  name="calorieAdjustment"
                  min="200"
                  max="500"
                  value={editedData.calorieAdjustment}
                  onChange={handleLocalChange}
                  required
                />
              </label>
            ) : null}

            <div className="userprofile-buttons">
              <button className="userprofile-btn save" type="submit" disabled={isSaving}>
                {isSaving ? (
                  <ClipLoader color="#fff" loading={true} size={20} />
                ) : (
                  "Save changes"
                )}
              </button>
              <button className="userprofile-btn cancel" type="button" onClick={handleEditToggle}>Cancel</button>
            </div>
          </form>
        )}
        {saveError && <p className="error-message">{saveError}</p>}

         {/* Mostrar el modal si showModal es true */}
         {showModalUser && <SuccessModal message="Profile updated successfully" onClose={() => setShowModalUser(false)} />}
      </div>
    </div>
  );
}

UserProfile.propTypes = {
  userData:PropTypes.object.isRequired,
  isEditing:PropTypes.bool.isRequired,
  handleEditToggle:PropTypes.func.isRequired,
  setEditedData:PropTypes.func.isRequired,
  setIsSaving:PropTypes.func.isRequired,
  dailyGoal:PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  userUid:PropTypes.string.isRequired,
  isSaving:PropTypes.bool.isRequired,
  setIsEditing:PropTypes.func.isRequired,
  setUserData:PropTypes.func.isRequired,
  editedData:PropTypes.object.isRequired,
};

export default UserProfile;