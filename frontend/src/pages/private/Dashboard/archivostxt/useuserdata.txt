import { useState, useEffect } from "react";
import {
  getUserProfileFromFirestore,
  saveUserProfileToFirestore,
  getFoodHistoryFromFirestore, // Asumo que tienes esta función
  saveFoodHistoryToFirestore,
  getCaloriesFromFirestore,
  saveCaloriesToFirestore,

} from '../../firebaseconfig/firebase';
import { auth } from '../../firebaseconfig/firebase'; // Ajusta la ruta según corresponda
import { useCalories } from "../home/CaloriesContext";  // Importamos el contexto de calorías


export const useUserData = () => {
  const [userData, setUserData] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState(null);
  const [foodHistory, setFoodHistory] = useState([]);  // El historial de alimentos
  
  const { caloriesConsumed, addCalories /*setCaloriesConsumed*/ } = useCalories();  // Accedemos al contexto de calorías
  const [dailyGoal, setDailyGoal] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  //const [lastResetDate, setLastResetDate] = useState(null);  // Para almacenar la última fecha de reinicio
  const [showModalUser, setShowModalUser] = useState(false); // Estado para controlar el modal


  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const user = auth.currentUser;  // Obtén el usuario autenticado
  
        if (user) {
          const profileData = await getUserProfileFromFirestore(user.uid);  // Asegúrate de pasar el uid
  
          if (profileData) {
            setUserData(profileData);
            setEditedData(profileData);
  
            // Obtener el historial de alimentos
            const foodHistoryData = await getFoodHistoryFromFirestore(user.uid); // Función para obtener el historial
            setFoodHistory(foodHistoryData || []); // Si no hay historial, inicializa como un array vacío
  
            const calculatedCalories = calculateCalories(profileData);
            setDailyGoal(calculatedCalories);
  
            // Obtener las calorías consumidas desde Firestore
            const caloriesFromFirestore = await getCaloriesFromFirestore(user.uid); 
  
            // Solo agregamos las calorías si no han sido sumadas previamente
            if (caloriesConsumed === 0) {
              addCalories(caloriesFromFirestore);  // Agregar las calorías desde Firestore al estado de calorías en el contexto
            }
  
          } else {
            // Si no hay perfil, reiniciamos el estado de usuario
            setUserData(null);
            setEditedData(null);
            addCalories(0);  // Reseteamos las calorías a 0 si no hay perfil
            setDailyGoal(0); // Establecemos 0 como objetivo diario si no hay perfil
            setFoodHistory([]); // Sin historial de alimentos si no hay perfil
          }
        } else {
          // Si no hay un usuario autenticado, manejar el caso aquí
          console.error("No se encuentra un usuario autenticado.");
        }
      } catch (error) {
        {/*console.error('Error al cargar los datos del perfil:', error);*/}
        setUserData(null);
        addCalories(0);
        setFoodHistory([]); // Aseguramos que no haya datos en caso de error
      }
      setIsLoading(false);
    };
  
    fetchUserData();
  }, [caloriesConsumed, addCalories]);

  useEffect(() => {
    // Este useEffect se ejecutará cuando userData cambie, asegurando que dailyGoal se actualice.
    if (userData) {
      const updatedCalories = calculateCalories(userData);  // Recalcular las calorías cuando userData cambie
      setDailyGoal(updatedCalories);  // Actualizar dailyGoal
    }
  }, [userData]);  // Esto hace que el dailyGoal se actualice cuando userData cambie (después de guardar el perfil, por ejemplo)
  

  // Función para agregar alimentos al historial
  const handleAddFoodToHistory = async (food) => {
    try {
      // Agregar el nuevo alimento al historial de alimentos
      const updatedFoodHistory = [...foodHistory, food];
      setFoodHistory(updatedFoodHistory); // Actualiza el historial de alimentos localmente
      await saveFoodHistoryToFirestore(updatedFoodHistory); // Guarda el historial actualizado en Firestore
  
      // Calcular las calorías totales después de agregar el nuevo alimento
      const totalCalories = updatedFoodHistory.reduce((acc, item) => acc + item.calories, 0);
  
      // Actualizar el estado de las calorías consumidas con el nuevo total
      addCalories(totalCalories); // Actualiza las calorías totales consumidas en el contexto de calorías
  
      // Verificar si ya existen calorías guardadas en Firestore para este usuario
      if (userData && userData.uid) {
        const previousCalories = await getCaloriesFromFirestore(userData.uid); // Obtener las calorías anteriores de Firestore
  
        const newTotalCalories = previousCalories + totalCalories; // Sumar las calorías anteriores con las nuevas
  
        // Guardar las nuevas calorías en Firestore
        await saveCaloriesToFirestore(userData.uid, newTotalCalories);
      }
    } catch (error) {
      console.error("Error al agregar alimento al historial:", error);
    }
  };
  

  // Calcular las calorías basadas en el perfil del usuario
  const calculateCalories = (profileData) => {
    if (!profileData || !profileData.age || !profileData.weight || !profileData.height || !profileData.activityLevel || !profileData.goal) {
      console.error("Faltan datos necesarios para calcular las calorías");
      return 0;
    }

    const { age, weight, height, activityLevel, goal, calorieAdjustment } = profileData;

    let bmr = 10 * weight + 6.25 * height - 5 * age + (profileData.gender === "male" ? 5 : -161);

    const activityMultiplier = {
      sedentary: 1.2,
      light: 1.375,
      moderate: 1.55,
      intense: 1.725,
      veryIntense: 1.9,
    };

    bmr *= activityMultiplier[activityLevel];

    if (goal === "lose") {
      const deficit = calorieAdjustment ? parseInt(calorieAdjustment) : 0;
      bmr -= deficit;
    } else if (goal === "gain") {
      const surplus = calorieAdjustment ? parseInt(calorieAdjustment) : 0;
      bmr += surplus;
    }

    return Math.floor(bmr * 100) / 100;
  };


  // Función para guardar el perfil
  const saveUserProfile = async (updatedProfileData) => {
    try {
      await saveUserProfileToFirestore(updatedProfileData);
      setUserData(updatedProfileData);  // Guardamos los datos del perfil localmente
      setEditedData(updatedProfileData); // Actualizamos los datos editados también
      const calculatedCalories = calculateCalories(updatedProfileData);
      setDailyGoal(calculatedCalories);  // Recalculamos el objetivo diario

       // Mostrar el modal de éxito
       setShowModalUser(true); // Activar el modal
    } catch (error) {
      console.error("Error al guardar el perfil:", error);
    }
  };

    // Función para cerrar el modal
    const closeModal = () => {
      setShowModalUser(false);
    };
  

  

  return {
    userData,
    isEditing,
    editedData,
    foodHistory,
    caloriesConsumed,
    dailyGoal,
    isLoading,
    setIsEditing,
    setEditedData,
    setUserData,
    saveUserProfile,
    showModalUser,
    closeModal,
    handleAddFoodToHistory,
  };
};


/----useuserdata con backend nodejs---/
import { useState, useEffect } from "react";
import { auth, firestore } from '../../firebaseconfig/firebase';
import { useCalories } from "../home/CaloriesContext";
import { doc, onSnapshot } from 'firebase/firestore';

export const useUserData = () => {
  const [userData, setUserData] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState(null);
  const [foodHistory, setFoodHistory] = useState([]);  
  const { caloriesConsumed, addCalories } = useCalories();
  const [dailyGoal, setDailyGoal] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showModalUser, setShowModalUser] = useState(false);

  useEffect(() => {
    const fetchUserData = () => {
      const user = auth.currentUser;

      if (user) {
        const userDocRef = doc(firestore, `users/${user.uid}`);

        // Escucha en tiempo real los cambios en los datos del usuario
        const unsubscribe = onSnapshot(userDocRef, (docSnapshot) => {
          if (docSnapshot.exists()) {
            const profileData = docSnapshot.data().profile;
            const foodHistoryData = docSnapshot.data().foodHistory || [];
            const caloriesFromBackend = docSnapshot.data().calories;

            setUserData(profileData);
            setEditedData(profileData);
            setFoodHistory(foodHistoryData);

            const calculatedCalories = calculateCalories(profileData);
            setDailyGoal(calculatedCalories);

            if (caloriesConsumed === 0) {
              addCalories(caloriesFromBackend);
            }
          } else {
            setUserData(null);
            setEditedData(null);
            addCalories(0);
            setDailyGoal(0);
            setFoodHistory([]);
          }
          setIsLoading(false);
        });

        return () => unsubscribe(); // Limpiar la suscripción al componente desmontarse
      } else {
        setUserData(null);
        setEditedData(null);
        addCalories(0);
        setDailyGoal(0);
        setFoodHistory([]);
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, [caloriesConsumed, addCalories]);


  useEffect(() => {
    if (userData) {
      const updatedCalories = calculateCalories(userData);
      setDailyGoal(updatedCalories);
    }
  }, [userData]);

  const handleAddFoodToHistory = async (food) => {
    try {
      const updatedFoodHistory = [...foodHistory, food];
      setFoodHistory(updatedFoodHistory);
  
      // Actualizar historial de alimentos directamente en Firestore
      const userDocRef = doc(firestore, `users/${userData.uid}`);
      await firestore.update(userDocRef, {
        foodHistory: updatedFoodHistory,
      });
  
      const totalCalories = updatedFoodHistory.reduce((acc, item) => acc + item.calories, 0);
      addCalories(totalCalories);
  
      // Guardar las calorías totales en Firestore
      await firestore.update(userDocRef, {
        calories: totalCalories,
      });
  
    } catch (error) {
      console.error("Error al agregar alimento al historial:", error);
    }
  };
  

  const calculateCalories = (profileData) => {
    if (!profileData || !profileData.age || !profileData.weight || !profileData.height || !profileData.activityLevel || !profileData.goal) {
      console.error("Faltan datos necesarios para calcular las calorías");
      return 0;
    }

    const { age, weight, height, activityLevel, goal, calorieAdjustment } = profileData;
    let bmr = 10 * weight + 6.25 * height - 5 * age + (profileData.gender === "male" ? 5 : -161);

    const activityMultiplier = {
      sedentary: 1.2,
      light: 1.375,
      moderate: 1.55,
      intense: 1.725,
      veryIntense: 1.9,
    };

    bmr *= activityMultiplier[activityLevel];

    if (goal === "lose") {
      const deficit = calorieAdjustment ? parseInt(calorieAdjustment) : 0;
      bmr -= deficit;
    } else if (goal === "gain") {
      const surplus = calorieAdjustment ? parseInt(calorieAdjustment) : 0;
      bmr += surplus;
    }

    return Math.floor(bmr * 100) / 100;
  };

  const saveUserProfile = async (updatedProfileData) => {
    try {
      await axios.put(`/api/user/${updatedProfileData.uid}`, { profile: updatedProfileData });
      setUserData(updatedProfileData);
      setEditedData(updatedProfileData);
      const calculatedCalories = calculateCalories(updatedProfileData);
      setDailyGoal(calculatedCalories);

      setShowModalUser(true);
    } catch (error) {
      console.error("Error al guardar el perfil:", error);
    }
  };

  const closeModal = () => {
    setShowModalUser(false);
  };

  return {
    userData,
    isEditing,
    editedData,
    foodHistory,
    caloriesConsumed,
    dailyGoal,
    isLoading,
    setIsEditing,
    setEditedData,
    setUserData,
    saveUserProfile,
    showModalUser,
    closeModal,
    handleAddFoodToHistory,
  };
};


